{"version":3,"sources":["02-lazyload-nested/pages/NoLazy.tsx","routes/routes.ts","logo.svg","routes/Navigation.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["routes","path","Component","lazy","name","NoLazy","_jsx","children","Navigation","Suspense","fallback","Router","_jsxs","className","src","logo","alt","map","_ref","NavLink","to","activeClassName","Switch","_ref2","Route","render","Redirect","App","_Fragment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","React","StrictMode","document","getElementById"],"mappings":"8NAAO,MCmBMA,EAAkB,CAC7B,CACEC,KAAM,YACNC,UAVeC,gBACjB,IACE,+BASAC,KAAM,sBAER,CACEH,KAAM,WACNC,UD3BkBG,IACbC,cAAA,MAAAC,SAAI,8BC2BTH,KAAM,mBC5BK,UAA0B,iCCYlC,MAAMI,EAAaA,IAEtBF,cAACG,WAAQ,CAACC,SAAUJ,cAAA,QAAAC,SAAM,eAAkBA,SAC1CD,cAACK,IAAM,CAAAJ,SACLK,eAAA,OAAKC,UAAU,cAAaN,SAAA,CAC1BK,eAAA,OAAAL,SAAA,CACED,cAAA,OAAKQ,IAAKC,EAAMC,IAAI,eACpBV,cAAA,MAAAC,SACGP,EAAOiB,KAAIC,IAAA,IAAC,KAAEjB,EAAI,KAAEG,GAAMc,EAAA,OACzBZ,cAAA,MAAAC,SACED,cAACa,IAAO,CAACC,GAAInB,EAAMoB,gBAAgB,aAAYd,SAC5CH,KAFIH,EAIJ,SAOXW,eAACU,IAAM,CAAAf,SAAA,CACJP,EAAOiB,KAAIM,IAAA,IAAC,KAAEtB,EAAI,UAAEC,GAAWqB,EAAA,OAC9BjB,cAACkB,IAAK,CAACvB,KAAMA,EAAiBwB,OAAQA,IAAMnB,cAACJ,EAAS,KAA9BD,EAAqC,IAE/DK,cAACoB,IAAQ,CAACN,GAAIpB,EAAO,GAAGC,iBC1BrB0B,MARf,WACE,OACErB,cAAAsB,WAAA,CAAArB,SACED,cAACE,EAAU,KAGjB,ECMeqB,MAZUC,IACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAKd,IAAkD,IAAjD,OAAEe,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASnB,EACpEe,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EAAY,GAExB,ECLFQ,IAASb,OACPnB,cAACiC,IAAMC,WAAU,CAAAjC,SACfD,cAACqB,EAAG,MAENc,SAASC,eAAe,SAM1Bb,G","file":"static/js/main.07309277.chunk.js","sourcesContent":["export const NoLazy = () => {\n  return <h1>NoLazyLoading - Component</h1>\n}\n","import { lazy, LazyExoticComponent } from 'react'\nimport { NoLazy } from '../02-lazyload-nested/pages/NoLazy'\n\ntype JSXComponent = () => JSX.Element\n\ninterface Route {\n  path: string\n  Component: LazyExoticComponent<JSXComponent> | JSXComponent\n  name: string\n  children?: Route[]\n}\n\nconst LazyLayout = lazy(\n  () =>\n    import(\n      /* webpackChunkName: 'LazyLayout' */ '../02-lazyload-nested/layout/LazyLayout'\n    )\n)\n\nexport const routes: Route[] = [\n  {\n    path: '/lazyload',\n    Component: LazyLayout,\n    name: 'LazyLoading Nested',\n  },\n  {\n    path: '/no-lazy',\n    Component: NoLazy,\n    name: 'NoLazy Loading',\n  },\n]\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { Suspense } from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  NavLink,\n  Redirect,\n} from 'react-router-dom'\nimport { routes } from './routes'\n\nimport logo from '../logo.svg'\n\nexport const Navigation = () => {\n  return (\n    <Suspense fallback={<span>Loading...</span>}>\n      <Router>\n        <div className=\"main-layout\">\n          <nav>\n            <img src={logo} alt=\"React Logo\" />\n            <ul>\n              {routes.map(({ path, name }) => (\n                <li key={path}>\n                  <NavLink to={path} activeClassName=\"nav-active\">\n                    {name}\n                  </NavLink>\n                </li>\n              ))}\n            </ul>\n          </nav>\n\n          {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n          <Switch>\n            {routes.map(({ path, Component }) => (\n              <Route path={path} key={path} render={() => <Component />} />\n            ))}\n            <Redirect to={routes[0].path} />\n          </Switch>\n        </div>\n      </Router>\n    </Suspense>\n  )\n}\n","import { Navigation } from './routes/Navigation'\n\nfunction App() {\n  return (\n    <>\n      <Navigation />\n    </>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}